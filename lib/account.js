/**
 * account.js
 */
"use strict";

const roles = require('./roles');

module.exports = class Account {

  /**
   * account constructor
   * @param {*} userid
   */
  constructor (userid = '') {
    this.userid = userid;
    this.password = '';
    this.roles = [roles.Public];
    this.dateCreated = null;
    this.dateUpdated = null;
    this.lastLogin = null;

    // state can be copied, but shouldn't be saved, updated or communicated
    this.state = {
      isAuthenticated: false
    };

    this.profile = {
      provider: '', // The provider with which the account authenticated (facebook, twitter, etc.).
      id: '', // A unique identifier for the account, as generated by the service provider.
      displayName: '', // The name of this account, suitable for display.
      name: {
        familyName: '', // The family name of this user, or "last name" in most Western languages.
        givenName: '', // The given name of this user, or "first name" in most Western languages.
        middleName: '' // The middle name of this user.
      },
      emails: [{
        value: '', // The actual email address.
        type: '' // The type of email address (home, work, etc.).
      }],
      photos: [{
        value: '' // The URL of the image.
      }]
    };

    this.settings = {
      prefix: '',
      homepage: ''
    }
  }

  verifyPassword(password) {
    if (password && password === this.password) {
      this.state.isAuthenticated = true;
    } else {
      this.state.isAuthenticated = false;
    }
    return this.state.isAuthenticated;
  }

  copy(a2) {
    let a1 = this;

    Object.keys(a2).forEach( function(key) {
      let t = typeof a2[key];

      if (key === 'roles') {
        a1.roles = a2.roles;
      } else if (key === 'state') {
        a1.state = a2.state;
      } else if (key === 'profile') {
        a1.profile = a2.profile;
      } else if (key === 'settings') {
        a1.settings = a2.settings;
      } else if (t !== "undefined" && t !== "function") {
        a1[key] = a2[key];
      }
    });
  }

  update(a2) {
    let a1 = this;

    Object.keys(a2).forEach( function(key) {
      let t = typeof a2[key];

      if (key === 'roles') {
        a1.roles = a2.roles;
      } else if (key === 'state') {
        //a1.state = a2.state;
      } else if (key === 'profile') {
        a1.profile = a2.profile;
      } else if (key === 'settings') {
        a1.merge(a1.settings, a2.settings);
      } else if (t !== "undefined" && t !== "function") {
        a1[key] = a2[key];
      }
    });
  }

  /**
   * return object for saving or communicating
   * strip fields and functions
   */
  package() {
    let a1 = {};
    let a2 = this;

    Object.keys(this).forEach( function(key) {
      let t = typeof a2[key];

      if (key === 'password') {
        //a1.password = a2.password;
      } else if (key === 'state') {
        //a1.state = a2.state;
      } else if (key === 'profile') {
        a1.profile = a2.profile;
      } else if (key === 'settings') {
        a1.settings = a2.settings;
      } else if (t !== "undefined" && t !== "function") {
        a1[key] = a2[key];
      }
    });

    return a2;
  }

  merge(a1,a2) {
    Object.keys(a2).forEach( function(key) {
      let t = typeof a2[key];
      if (t !== "undefined" && t !== "function") {
        a1[key] = a2[key];
      }
    });
  }

  hasRole(role) {
    return this.roles.includes(role);
  }
};
